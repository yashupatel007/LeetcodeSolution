#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> mp;  // remainder â†’ index
        mp[0] = -1;  // handle subarrays starting from index 0
        
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (k != 0) sum %= k;   // reduce modulo only if k != 0
            if (sum < 0) sum += k;  // handle negative k or sum
            
            // if remainder already seen
            if (mp.find(sum) != mp.end()) {
                if (i - mp[sum] > 1)
                    return true;  // subarray length >= 2
            } else {
                // store first occurrence of this remainder
                mp[sum] = i;
            }
        }
        return false;
    }
};
